// Generated by CoffeeScript 1.6.3
var Scene,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Scene = (function() {
  function Scene(options) {
    this.update = __bind(this.update, this);
    var edgeEffect, effect, effectFXAA, renderTargetParams;
    this.WIDTH = options.width !== void 0 ? options.width : 500;
    this.HEIGHT = options.height !== void 0 ? options.height : 500;
    this.renderer = new THREE.WebGLRenderer({
      preserveDrawingBuffer: true,
      antialias: true
    });
    this.renderer.setSize(options.width, options.height);
    $('#container').append(this.renderer.domElement);
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(60, this.WIDTH / this.HEIGHT, .1, 1000);
    renderTargetParams = {
      minFilter: THREE.LinearFilter,
      magFilter: THREE.LinearFilter,
      format: THREE.RGBFormat,
      stencilBuffer: false
    };
    this.composer = new THREE.EffectComposer(this.renderer, new THREE.WebGLRenderTarget(this.WIDTH, this.HEIGHT, renderTargetParams));
    this.composer.addPass(new THREE.RenderPass(this.scene, this.camera));
    edgeEffect = new THREE.ShaderPass(THREE.EdgeShader2);
    edgeEffect.uniforms['aspect'].value.x = this.WIDTH;
    edgeEffect.uniforms['aspect'].value.y = this.HEIGHT;
    this.composer.addPass(edgeEffect);
    effectFXAA = new THREE.ShaderPass(THREE.FXAAShader);
    effectFXAA.uniforms['resolution'].value.set(1 / this.WIDTH, 1 / this.HEIGHT);
    this.composer.addPass(effectFXAA);
    effect = new THREE.ShaderPass(THREE.CopyShader);
    effect.renderToScreen = true;
    this.composer.addPass(effect);
    this.frameLength = 1000 / 30;
    this.time = 0;
    this.frames = [];
    this.saveFrames = true;
  }

  Scene.prototype.init = function() {
    var cube, i, numPerSide, _i;
    this.camera.position.z = 500;
    this.cubes = [];
    numPerSide = 7;
    for (i = _i = -numPerSide; -numPerSide <= numPerSide ? _i <= numPerSide : _i >= numPerSide; i = -numPerSide <= numPerSide ? ++_i : --_i) {
      cube = new THREE.Mesh(new THREE.CubeGeometry(20, 500, 20), new THREE.MeshBasicMaterial({
        color: 0xFFFFFF
      }));
      cube.position.x = i * 40;
      this.spinCube(cube, utils.map(i, -numPerSide, numPerSide, 0, 1000), i === numPerSide ? true : false);
      this.scene.add(cube);
      this.cubes.push(cube);
    }
    return this.update();
  };

  Scene.prototype.spinCube = function(cube, delay, saveFrames) {
    var tween;
    if (delay == null) {
      delay = 1000;
    }
    if (saveFrames == null) {
      saveFrames = false;
    }
    tween = new TWEEN.Tween({
      cube: cube,
      x: cube.rotation.x,
      scene: this
    });
    tween.to({
      x: cube.rotation.x + Math.PI
    }, 1000);
    tween.delay(delay);
    tween.easing(TWEEN.Easing.Quadratic.InOut);
    tween.onUpdate(function() {
      return this.cube.rotation.x = this.x;
    });
    tween.onComplete(function() {
      this.scene.spinCube(this.cube);
      if (saveFrames && this.scene.saveFrames) {
        this.scene.saveFrames = false;
        this.scene.saveFramesToZip();
        return $('#download').fadeIn();
      }
    });
    return tween.start(this.time);
  };

  Scene.prototype.saveFramesToZip = function() {
    var blobLink, folder, i, pad, zip;
    pad = function(n, width, z) {
      z = z || '0';
      n = n + '';
      if (n.length >= width) {
        return n;
      } else {
        return new Array(width - n.length + 1).join(z) + n;
      }
    };
    zip = new JSZip();
    folder = zip.folder("frames");
    i = 0;
    while (i < this.frames.length) {
      folder.file("frame" + pad(i, 3, 0) + ".png", this.frames[i], {
        base64: true
      });
      i++;
    }
    blobLink = document.getElementById('download');
    blobLink.download = "frames.zip";
    return blobLink.href = window.URL.createObjectURL(zip.generate({
      type: "blob"
    }));
  };

  Scene.prototype.update = function() {
    var frame,
      _this = this;
    setTimeout((function() {
      return requestAnimationFrame(_this.update);
    }), this.frameLength);
    TWEEN.update(this.time);
    this.time += this.frameLength;
    this.composer.render();
    if (this.saveFrames) {
      frame = this.renderer.domElement.toDataURL().replace(/^data:image\/(png|jpg);base64,/, "");
      return this.frames.push(frame);
    }
  };

  return Scene;

})();
